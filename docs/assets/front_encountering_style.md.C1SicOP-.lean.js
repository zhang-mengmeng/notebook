import{_ as i,c as a,a4 as e,o as t}from"./chunks/framework.DJY4F8Kc.js";const p=JSON.parse('{"title":"邂逅 CSS","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"front/encountering/style.md","filePath":"front/encountering/style.md","lastUpdated":1739204821000}'),r={name:"front/encountering/style.md"};function o(n,l,h,d,u,s){return t(),a("div",null,l[0]||(l[0]=[e(`<h1 id="邂逅-css" tabindex="-1">邂逅 CSS <a class="header-anchor" href="#邂逅-css" aria-label="Permalink to &quot;邂逅 CSS&quot;">​</a></h1><p>早期的网页都是通过 HTML 来编写的，但是我们希望 HTML 页面可以更加丰富</p><p>CSS 的出现是为了美化 HTML 的，并且让结构(HTML)与样式(CSS)分离</p><h2 id="css-的编写规则" tabindex="-1">CSS 的编写规则 <a class="header-anchor" href="#css-的编写规则" aria-label="Permalink to &quot;CSS 的编写规则&quot;">​</a></h2><ul><li><p>内联样式: 存在于 HTML 元素的 style 属性之中</p></li><li><p>内部样式: 将 CSS 放在 HTML 文件 &lt; head &gt;元素里面的&lt; style &gt;元素之中。</p></li><li><p>外部样式：将 CSS 编写一个独立的文件中，并且通过&lt; link &gt;元素引入进来</p></li></ul><h2 id="常见的-css-属性" tabindex="-1">常见的 CSS 属性 <a class="header-anchor" href="#常见的-css-属性" aria-label="Permalink to &quot;常见的 CSS 属性&quot;">​</a></h2><ul><li><p>文本属性</p><ol><li><p>text-decoration</p><p>none:无任何装饰线，可以去除 a 元素默认的下划线</p><p>underline:下划线</p><p>overline:上划线</p><p>line-through:中划线(删除线)</p></li></ol></li></ul><h2 id="常见的选择器" tabindex="-1">常见的选择器 <a class="header-anchor" href="#常见的选择器" aria-label="Permalink to &quot;常见的选择器&quot;">​</a></h2><h3 id="通用选择器" tabindex="-1">通用选择器 * <a class="header-anchor" href="#通用选择器" aria-label="Permalink to &quot;通用选择器 \\*&quot;">​</a></h3><pre><code>  1. 所有的元素都会被选中,做一些通用性的设置

  2. 效率比较低，尽量不要使用
</code></pre><h3 id="简单选择器" tabindex="-1">简单选择器 <a class="header-anchor" href="#简单选择器" aria-label="Permalink to &quot;简单选择器&quot;">​</a></h3><pre><code>  1. 元素选择器，使用元素的名称

  2. 类选择器，使用.类名

  3. id选择器，使用#id

::: danger 注意
在一个文档里面id的值是唯一的
:::
</code></pre><h3 id="属性选择器" tabindex="-1">属性选择器 <a class="header-anchor" href="#属性选择器" aria-label="Permalink to &quot;属性选择器&quot;">​</a></h3><pre><code>1. 拥有某一个属性[att]

2. 属性等于某个值[att=val]
</code></pre><h3 id="后代选择器" tabindex="-1">后代选择器 <a class="header-anchor" href="#后代选择器" aria-label="Permalink to &quot;后代选择器&quot;">​</a></h3><pre><code>1. 所有的后代(直接/间接的后代) 选择器之间以空格分割

2. 直接子代选择器(必须是直接子代)  选择器之间以 &gt; 分割
</code></pre><h3 id="兄弟选择器" tabindex="-1">兄弟选择器 <a class="header-anchor" href="#兄弟选择器" aria-label="Permalink to &quot;兄弟选择器&quot;">​</a></h3><ul><li>相邻兄弟选择器 <ol><li>使用符号 + 连接</li></ol></li><li>普遍兄弟选择器 <ol><li>使用符号 ~ 连接</li></ol></li></ul><h3 id="选择器组" tabindex="-1">选择器组 <a class="header-anchor" href="#选择器组" aria-label="Permalink to &quot;选择器组&quot;">​</a></h3><ul><li>交集选择器 <ol><li>需要同时符合两个选择器条件(两个选择器紧密连接)</li></ol></li><li>并集选择器 <ol><li>符合一个选择器条件即可(两个选择器以，分割)</li></ol></li></ul><h3 id="动态伪类" tabindex="-1">动态伪类 <a class="header-anchor" href="#动态伪类" aria-label="Permalink to &quot;动态伪类&quot;">​</a></h3><ul><li>a:link 未访问的连接</li><li>a:visited 已访问的链接</li><li>a:hover 鼠标挪动到连接上</li><li>a:active 激活的连接</li></ul><h2 id="块级元素水平居中" tabindex="-1">块级元素水平居中 <a class="header-anchor" href="#块级元素水平居中" aria-label="Permalink to &quot;块级元素水平居中&quot;">​</a></h2><p>block box width = width + padding + border + margin</p><h3 id="伪元素" tabindex="-1">伪元素 <a class="header-anchor" href="#伪元素" aria-label="Permalink to &quot;伪元素&quot;">​</a></h3><ul><li>::first-line 可以针对首行文本设置属性</li><li>::first-letter 可以针对首字母设置属性</li><li>::before 可以在元素内容前插入内容</li><li>::after 可以在元素内容后插入内容</li></ul><h2 id="继承" tabindex="-1">继承 <a class="header-anchor" href="#继承" aria-label="Permalink to &quot;继承&quot;">​</a></h2><h3 id="inherit-继承父元素的属性" tabindex="-1">inherit 继承父元素的属性 <a class="header-anchor" href="#inherit-继承父元素的属性" aria-label="Permalink to &quot;inherit 继承父元素的属性&quot;">​</a></h3><h2 id="选择器权重" tabindex="-1">选择器权重 <a class="header-anchor" href="#选择器权重" aria-label="Permalink to &quot;选择器权重&quot;">​</a></h2><ul><li>!important 10000</li><li>内联样式 1000</li><li>id选择器 100</li><li>类选择器、伪类选择器、属性选择器 10</li><li>元素选择器、伪元素选择器 1</li><li>通配符选择器、子选择器、相邻选择器、同胞选择器 0</li></ul><h2 id="css属性-display" tabindex="-1">CSS属性 - display <a class="header-anchor" href="#css属性-display" aria-label="Permalink to &quot;CSS属性 - display&quot;">​</a></h2><ul><li>block 让元素显示为块级元素</li><li>inline 让元素显示为行内元素</li><li>inline-block 让元素同时具备行内元素和块级元素的特性</li><li>none 让元素不显示</li></ul><h2 id="元素隐藏方法" tabindex="-1">元素隐藏方法 <a class="header-anchor" href="#元素隐藏方法" aria-label="Permalink to &quot;元素隐藏方法&quot;">​</a></h2><ul><li>display: none; <ul><li>元素不显示出来，并且也不占据位置，不占据任何空间</li></ul></li><li>visibility：hidden <ul><li>设置为hidden，虽然元素不可见，但是会占据元素应该占据的空间</li><li>默认为visible，元素是可见的</li></ul></li><li>rgba设置颜色，将a的值设置为0 <ul><li>rgba的a设置的是alpha值，可以设置透明度，不影响子元素</li></ul></li><li>opacity设置透明度，设置为0 <ul><li>设置整个元素的透明度，会影响所有的子元素</li></ul></li></ul><h2 id="margin的传递" tabindex="-1">margin的传递 <a class="header-anchor" href="#margin的传递" aria-label="Permalink to &quot;margin的传递&quot;">​</a></h2><ul><li>margin-top传递 <ul><li>如果块级元素的顶部线和父元素的顶部线重叠，那么这个快递元素的margin-top值会传递给父元素</li></ul></li><li>margin-bottom传递 <ul><li>如果块级元素的底部线和父元素的底部线重叠，并且父元素的高度是auto，那么这个块级元素的margin-bottom值会传递给父元素</li></ul></li><li>如何防止出现传递问题 <ul><li>给父元素设置padding-top或者padding-bottom</li><li>给父元素设置border</li><li>触发BFC:给父元素设置overflow:hidden</li></ul></li></ul><h2 id="绝对定位-absolute" tabindex="-1">绝对定位(absolute) <a class="header-anchor" href="#绝对定位-absolute" aria-label="Permalink to &quot;绝对定位(absolute)&quot;">​</a></h2><p><strong>1.1 绝对定位</strong></p><ol><li><p>会脱离标准流</p></li><li><p>相对的参照物</p><ul><li>最近的祖先定位元素</li><li>如果祖先元素都没有定位，相对视口</li></ul></li><li><p>子绝父相</p><ul><li>子元素绝对定位</li><li>父元素相对定位</li></ul></li><li><p>子绝父绝</p><ul><li>子元素绝对定位</li><li>父元素绝对定位</li></ul></li><li><p>子绝父固</p><ul><li>子元素绝对定位</li><li>父元素固定定位</li></ul></li></ol><p><strong>1.2 position设置absolute/fixed特性</strong></p><ol><li>都属脱离标准流</li><li>可以设置任何宽度和高度</li><li>默认宽度是包裹内容</li><li>不再给父级元素汇报宽度和高度</li><li>自己内部依然按照标准流布局</li><li>公式 <ul><li>包含块的width = left + right + margin-left + margin-right + width <ul><li>left0 right0 margin 0 auto width:200px -&gt;水平居中</li><li>left 0 right 0 margin 0 -&gt; 宽度沾满包含块的宽度</li></ul></li><li>垂直方向也是一样</li></ul></li></ol><p><strong>1.3绝对定位案例</strong></p><h2 id="浮动" tabindex="-1">浮动 <a class="header-anchor" href="#浮动" aria-label="Permalink to &quot;浮动&quot;">​</a></h2><p><strong>1.1浮动规则</strong></p><ul><li>规则一：向左浮动或者向右浮动</li><li>规则二：不能超出包含块</li><li>规则三：浮动元素不能层叠</li><li>规则四：浮动元素会将行内级元素内容推出</li><li>规则五：浮动只能左右浮动，不能超出本行的高度</li></ul>`,45)]))}const b=i(r,[["render",o]]);export{p as __pageData,b as default};
