import{_ as e,c as i,a4 as t,o as l}from"./chunks/framework.DJY4F8Kc.js";const h=JSON.parse('{"title":"JavaScript执行原理","description":"","frontmatter":{},"headers":[],"relativePath":"front/javascript/execute.md","filePath":"front/javascript/execute.md","lastUpdated":1747234668000}'),o={name:"front/javascript/execute.md"};function r(c,a,d,n,s,u){return l(),i("div",null,a[0]||(a[0]=[t('<h1 id="javascript执行原理" tabindex="-1">JavaScript执行原理 <a class="header-anchor" href="#javascript执行原理" aria-label="Permalink to &quot;JavaScript执行原理&quot;">​</a></h1><h2 id="javascript代码的执行" tabindex="-1">JavaScript代码的执行 <a class="header-anchor" href="#javascript代码的执行" aria-label="Permalink to &quot;JavaScript代码的执行&quot;">​</a></h2><ul><li>浏览器的内核由两部分组成，以webkit为例 <ul><li>WebCore：负责HTML解析 布局 渲染等等相关工作</li><li>JavaScriptCore：解析 执行JavaScript代码</li></ul></li></ul><h2 id="v8引擎的执行原理" tabindex="-1">V8引擎的执行原理 <a class="header-anchor" href="#v8引擎的执行原理" aria-label="Permalink to &quot;V8引擎的执行原理&quot;">​</a></h2><ul><li>V8使用C ++编写的Google开源高性能JavaScript和WebAssembly引擎，它用于Chrome和Node.js等</li><li>V8可以独立运行，也可以嵌入到任何C++应用程序中</li></ul><h2 id="v8引擎的架构" tabindex="-1">V8引擎的架构 <a class="header-anchor" href="#v8引擎的架构" aria-label="Permalink to &quot;V8引擎的架构&quot;">​</a></h2><ul><li>Parse模块会将JavaScript代码转换成AST(抽象语法树)，这是因为解释器并不直接认识JavaScript代码 <ul><li>如果函数没有被调用，那么是不会被转换成AST的</li></ul></li><li>Ignition是一个解释器，会将AST转换成ByteCode(字节码) <ul><li>同时会收集TurboFan优化所需要的信息(比如函数参数的类型信息，有了类型才能进行真实的运算)</li><li>如果函数只调用一次，Ignition会解释执行ByteCode</li></ul></li><li>TurboFan是一个编译器，可以将字节码编译为CPU可以直接执行的机器码 <ul><li>如果一个函数被多次调用，那么就会被标记为热点函数，那么就会经过TurboFan转换成优化的机器码，提高代码的执行性能</li><li>但是机器码也会被还原为ByteCode，这是因为如果后续执行函数的过程中，类型发生了变化(比如sun函数原来执行的是number类型，后来执行变成了string类型)，之前优化的机器码并不能正确的处理运算，就会逆向的转成字节码</li></ul></li></ul><h2 id="初始化全局对象" tabindex="-1">初始化全局对象 <a class="header-anchor" href="#初始化全局对象" aria-label="Permalink to &quot;初始化全局对象&quot;">​</a></h2><ul><li>js引擎会在<code>执行代码之前</code>,会在<code>堆内存中创建一个全局对象</code>: Global Object (GO) <ul><li>该对象<code>所有的作用域</code>都可以访问</li><li>里面会包含<code>Date</code> <code>Array</code> <code>String</code> <code>Number</code> <code>setTimout</code> <code>setInterval</code> 等等</li><li>其中还有一个<code>window属性</code>指向自己</li></ul></li></ul>',9)]))}const v=e(o,[["render",r]]);export{h as __pageData,v as default};
